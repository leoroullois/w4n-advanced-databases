if __name__ == "__main__":
    from database import connect
    from utils import monitor_function
    from task2 import bad_users, deleting_all_user_not_connected_for_one_year, get_average_age_of_users, increase_all_employee_salaries_by_10_percent_every_year, look_for_the_most_common_word, most_engaged_users, raise_salary_best_moderators, select_all_user_informations, censorship
    from queries_partition import p_bad_users, p_censorship, p_deleting_all_user_not_connected_for_one_year, p_get_average_age_of_users, p_increase_all_employee_salaries_by_10_percent_every_year, p_look_for_the_most_common_word, p_most_engaged_users, p_raise_salary_best_moderators, p_select_all_user_informations
else:
    from src.database import connect
    from src.utils import monitor_function
    from src.task2 import bad_users, deleting_all_user_not_connected_for_one_year, get_average_age_of_users, increase_all_employee_salaries_by_10_percent_every_year, look_for_the_most_common_word, most_engaged_users, raise_salary_best_moderators, select_all_user_informations, censorship
    from src.queries_partition import p_bad_users, p_censorship, p_deleting_all_user_not_connected_for_one_year, p_get_average_age_of_users, p_increase_all_employee_salaries_by_10_percent_every_year, p_look_for_the_most_common_word, p_most_engaged_users, p_raise_salary_best_moderators, p_select_all_user_informations


def build_post_range_partition():
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_range_posts
    (
    post_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    post_title text COLLATE pg_catalog."default" NOT NULL,
    moderator_id integer NOT NULL,
    post_created_at timestamp NOT NULL,
    user_id integer NOT NULL,
    post_content text COLLATE pg_catalog."default",
    post_updated_at timestamp with time zone,
    CONSTRAINT partition_range_posts_pkey PRIMARY KEY (post_id, post_created_at),
    CONSTRAINT fk_12 FOREIGN KEY (moderator_id)
        REFERENCES public.moderation_department (moderator_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_16_2 FOREIGN KEY (user_id)
        REFERENCES public.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
    ) PARTITION BY RANGE(post_created_at);
    """
    
    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
    
    #create a partition table for each year from 2001 to 2020 included
    #add TABLESPACE to specify where to keep data
    for i in range(2000, 2021):
        QUERY = """
            CREATE TABLE IF NOT EXISTS public.partition_posts_%s PARTITION OF public.partition_range_posts
            FOR VALUES FROM('%s-01-01') TO ('%s-01-01');
        """ %(i, i, i+1)
    
        curr.execute(QUERY)
        conn.commit()

    conn.close()


def build_meeting_range_partition():
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_range_meetings
    (
        meeting_id integer NOT NULL,
        moderator_id integer NOT NULL,
        meeting_name text COLLATE pg_catalog."default" NOT NULL,
        meeting_date date NOT NULL,
        meeting_desc text COLLATE pg_catalog."default" NOT NULL,
        user_id integer NOT NULL,
        CONSTRAINT pk_13 PRIMARY KEY (meeting_id, meeting_date),
        CONSTRAINT fk_11 FOREIGN KEY (moderator_id)
            REFERENCES public.moderation_department (moderator_id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION,
        CONSTRAINT fk_16_1 FOREIGN KEY (user_id)
            REFERENCES public.users (user_id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
    ) PARTITION BY RANGE(meeting_date);

    
    CREATE TABLE IF NOT EXISTS public.partition_meetings_Y_2 
    PARTITION OF public.partition_range_meetings
    FOR VALUES FROM('2020-01-01') TO ('2021-01-01');
    
    CREATE TABLE IF NOT EXISTS public.partition_meetings_Y_1 
    PARTITION OF public.partition_range_meetings
    FOR VALUES FROM('2021-01-01') TO ('2022-01-01');

    CREATE TABLE IF NOT EXISTS public.partition_meetings_Y 
    PARTITION OF public.partition_range_meetings
    FOR VALUES FROM('2022-01-01') TO ('2023-01-01');
    """

    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
    conn.close()

def build_partition_marketplace():
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_list_marketplace
    (
    sale_id integer NOT NULL,
    sale_title text COLLATE pg_catalog."default" NOT NULL,
    sale_desc text COLLATE pg_catalog."default" NOT NULL,
    sale_price double precision NOT NULL,
    customer_id integer NOT NULL,
    seller_id integer NOT NULL,
    sales_rep_id integer NOT NULL,
    created_at timestamp with time zone,
    product_category text COLLATE pg_catalog."default",
    CONSTRAINT pk_14 PRIMARY KEY (sale_id, product_category),
    CONSTRAINT fk_14_3 FOREIGN KEY (seller_id)
        REFERENCES public.sellers (seller_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_18_2 FOREIGN KEY (sales_rep_id)
        REFERENCES public.sales_moderation_department (sales_rep_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_6 FOREIGN KEY (customer_id)
        REFERENCES public.customers (customer_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
) PARTITION BY LIST(product_category);
    
    CREATE TABLE IF NOT EXISTS public.marketplace_electronics
    PARTITION OF public.partition_list_marketplace
    FOR VALUES IN ('Electronics');

    CREATE TABLE IF NOT EXISTS public.marketplace_clothing
    PARTITION OF public.partition_list_marketplace
    FOR VALUES IN ('Clothing');

    CREATE TABLE IF NOT EXISTS marketplace_books
    PARTITION OF public.partition_list_marketplace
    FOR VALUES IN ('Books');
    """
    
    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
    conn.close()

def benchmark():
    NB_ITERATIONS = 5
    
    for _ in range(NB_ITERATIONS):
            monitor_function(select_all_user_informations, index=False, partition_db=True)()
            monitor_function(raise_salary_best_moderators, index=False, partition_db=True)()
            monitor_function(look_for_the_most_common_word, index=False, partition_db=True)()
            monitor_function(most_engaged_users, index=False, partition_db=True)()
            monitor_function(get_average_age_of_users, index=False, partition_db=True)()
            monitor_function(increase_all_employee_salaries_by_10_percent_every_year, index=False, partition_db=True)()
            monitor_function(bad_users, index=False, partition_db=True)()
            monitor_function(censorship, index=False, partition_db=True)()
            # monitor_function(deleting_all_user_not_connected_for_one_year, index=False)()


    # for _ in range(NB_ITERATIONS):
    #         monitor_function(p_select_all_user_informations, partition=True, partition_db=True)()
    #         monitor_function(p_raise_salary_best_moderators, partition=True, partition_db=True)()
    #         monitor_function(p_look_for_the_most_common_word, partition=True, partition_db=True)()
    #         monitor_function(p_most_engaged_users, partition=True, partition_db=True)()
    #         monitor_function(p_get_average_age_of_users, partition=True, partition_db=True)()
    #         monitor_function(p_increase_all_employee_salaries_by_10_percent_every_year, partition=True, partition_db=True)()
    #         monitor_function(p_bad_users, partition=True, partition_db=True)()
    #         monitor_function(p_censorship, partition=True, partition_db=True)()
    #         # monitor_function(p_deleting_all_user_not_connected_for_one_year, partition=True)()

def build_partition_employees():
    
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_employees
    (
        employee_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        employee_first_name text COLLATE pg_catalog."default" NOT NULL,
        employee_last_name text COLLATE pg_catalog."default" NOT NULL,
        employee_email text COLLATE pg_catalog."default" NOT NULL,
        employee_date_of_birth date NOT NULL,
        department_id integer NOT NULL,
        employee_salary integer NOT NULL,
        employee_updated_at timestamp without time zone,
        employee_created_at timestamp with time zone NOT NULL,
        employee_phone_number text COLLATE pg_catalog."default" NOT NULL,
        CONSTRAINT partition_employees_pkey PRIMARY KEY (employee_id, department_id),
        CONSTRAINT fk_14_2 FOREIGN KEY (department_id)
            REFERENCES public.departments (department_id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
    ) PARTITION BY LIST(department_id);


     CREATE TABLE IF NOT EXISTS employees_moderators
     PARTITION OF public.partition_employees
     FOR VALUES IN (1) ;

     CREATE TABLE IF NOT EXISTS employees_sales_moderators
     PARTITION OF public.partition_employees
     FOR VALUES IN (2) ;

     CREATE TABLE IF NOT EXISTS employees_human_resources
     PARTITION OF public.partition_employees
     FOR VALUES IN (3) ;
    """
    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
    conn.close()

def build_partition_users():
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_users
    (
        user_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
        user_first_name text COLLATE pg_catalog."default" NOT NULL,
        user_last_name text COLLATE pg_catalog."default" NOT NULL,
        user_date_of_birth date NOT NULL,
        user_encrypted_password text COLLATE pg_catalog."default" NOT NULL,
        user_created_at timestamp with time zone NOT NULL,
        user_updated_at timestamp with time zone,
        user_last_connected timestamp with time zone,
        user_email text COLLATE pg_catalog."default" NOT NULL,
        user_phone_number text COLLATE pg_catalog."default" NOT NULL,
        user_country text COLLATE pg_catalog."default",
        CONSTRAINT partition_users_pkey PRIMARY KEY (user_id, user_created_at)
    ) PARTITION BY RANGE(user_created_at);
        """
    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
        
    for i in range(2000, 2021):
        QUERY = """
        CREATE TABLE IF NOT EXISTS public.partition_users_%s 
        PARTITION OF public.partition_users
        FOR VALUES FROM('%s-01-01') TO ('%s-01-01');
        """ %(i, i, i+1)
    
        curr.execute(QUERY)
        conn.commit()
    conn.close()


def build_partition_comments():
    QUERY = """
    CREATE TABLE IF NOT EXISTS public.partition_comments
    (
        comment_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        comment_content text COLLATE pg_catalog."default" NOT NULL,
        post_id integer NOT NULL,
        user_id integer NOT NULL,
        comment_created_at timestamp with time zone NOT NULL,
        comment_updated_at timestamp with time zone NOT NULL,
        CONSTRAINT partition_comments_pkey PRIMARY KEY (comment_id),
        CONSTRAINT fk_15 FOREIGN KEY (post_id)
            REFERENCES public.posts (post_id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION,
        CONSTRAINT fk_16 FOREIGN KEY (user_id)
            REFERENCES public.users (user_id) MATCH SIMPLE
            ON UPDATE NO ACTION
            ON DELETE NO ACTION
    ) PARTITION BY HASH(comment_id);


    CREATE TABLE IF NOT EXISTS public.partitionHash_comments_H1
    PARTITION OF public.partition_comments
    for VALUES WITH (modulus 5, remainder 0);
    
    CREATE TABLE IF NOT EXISTS public.partitionHash_comments_H2
    PARTITION OF public.partition_comments
    for VALUES WITH (modulus 5, remainder 1);
    
    CREATE TABLE IF NOT EXISTS public.partitionHash_comments_H3
    PARTITION OF public.partition_comments
    for VALUES WITH (modulus 5, remainder 2);
    
    CREATE TABLE IF NOT EXISTS public.partitionHash_comments_H4
    PARTITION OF public.partition_comments
    for VALUES WITH (modulus 5, remainder 3);
    
    CREATE TABLE IF NOT EXISTS public.partitionHash_comments_H5
    PARTITION OF public.partition_comments
    for VALUES WITH (modulus 5, remainder 4);
"""
    conn, curr = connect(partition=True)
    curr.execute(QUERY)
    conn.commit()
    conn.close()

def main():
    # build_post_range_partition()
    # build_meeting_range_partition()
    # build_partition_marketplace()
    # build_partition_employees()
    # build_partition_comments()
    # build_partition_users()
    benchmark()

if __name__ == "__main__":
    main()
